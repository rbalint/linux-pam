--- Linux-PAM-0.72/modules/pam_limits/Makefile.orig	Sun Mar  4 23:11:18 
2001
+++ Linux-PAM-0.72/modules/pam_limits/Makefile	Sun Mar  4 16:40:59 2001
@@ -22,6 +22,8 @@
 LIBOBJD = $(addprefix dynamic/,$(LIBOBJ))
 LIBOBJS = $(addprefix static/,$(LIBOBJ))
 
+LINKLIBS+=-lcap
+
 dynamic/%.o : %.c
 	$(CC) $(CFLAGS) $(DYNAMIC) $(CPPFLAGS) $(TARGET_ARCH) -c $< -o $@
 
--- Linux-PAM-0.72/modules/pam_limits/pam_limits.c.orig	Sun Mar  4 
23:11:21 2001
+++ Linux-PAM-0.72/modules/pam_limits/pam_limits.c	Sun Mar  4 23:21:45 
2001
@@ -17,6 +17,9 @@
 #error THIS CODE IS KNOWN TO WORK ONLY ON LINUX !!!
 #endif 
 
+#include <sys/capability.h>
+#include <sys/prctl.h>
+
 #include <stdio.h>
 #include <unistd.h>
 #include <string.h>
@@ -59,12 +62,16 @@
 				 specific user or to count all logins */
 static int priority;	    /* the priority to run user process with */
 static char chroot_dir[8092] = "";	/* directory to chroot into */
+static cap_t capabilities;	/* capability handle */
+static int caps_set = 0;	/* capabilities set */
+static int caps_allocated = 0;	/* capabilities allocated */
 
 #define LIMIT_LOGIN RLIM_NLIMITS+1
 #define LIMIT_NUMSYSLOGINS RLIM_NLIMITS+2
 
 #define LIMIT_PRI RLIM_NLIMITS+3
 #define LIMIT_CHROOT RLIM_NLIMITS+4
+#define LIMIT_CAPS RLIM_NLIMITS+5
 
 #define LIMIT_SOFT  1
 #define LIMIT_HARD  2
@@ -254,6 +261,11 @@
     priority = 0;
     login_limit = -2;
     login_limit_def = LIMITS_DEF_NONE;
+    if (caps_allocated)
+	cap_free(capabilities);
+    capabilities = cap_init();
+    caps_allocated = 1;
+    caps_set = 0;
     return retval;
 }    
 
@@ -303,6 +315,8 @@
 	limit_item = LIMIT_PRI;
     } else if (strcmp(lim_item, "chroot") == 0) {
 	limit_item = LIMIT_CHROOT;
+    } else if (strcmp(lim_item, "capabilities") == 0) {
+	limit_item = LIMIT_CAPS;
     } else {
         _pam_log(LOG_DEBUG,"unknown limit item '%s'", lim_item);
         return;
@@ -321,7 +335,8 @@
     
     limit_value = strtol(lim_value, (char **)endptr, 10);
     if (limit_value == 0 && value_orig == *endptr
-	&& limit_item != LIMIT_CHROOT) { /* no chars read */
+	&& limit_item != LIMIT_CHROOT
+	&& limit_item != LIMIT_CAPS) { /* no chars read */
         if (strcmp(lim_value,"-") != 0) {
             _pam_log(LOG_DEBUG,"wrong limit value '%s'", lim_value);
             return;
@@ -354,7 +369,7 @@
     
     if (limit_item != LIMIT_LOGIN && limit_item != LIMIT_NUMSYSLOGINS 
 		    && limit_item != LIMIT_PRI && limit_item != LIMIT_CHROOT
-		    ) {
+		    && limit_item != LIMIT_CAPS) {
         if (limit_type & LIMIT_SOFT) {
 	    if (limits[limit_item].src_soft < source) {
                 return;
@@ -385,6 +400,10 @@
         	}
 	} else if (limit_item == LIMIT_CHROOT) {
 		strncpy(chroot_dir, value_orig, sizeof(chroot_dir));
+	} else if (limit_item == LIMIT_CAPS) {
+		capabilities = cap_from_text(value_orig);
+		prctl(PR_SET_KEEPCAPS, 1);
+		caps_set = 1;
 	}
     return;    
 }
@@ -441,7 +460,7 @@
         memset(item, 0, sizeof(item));
         memset(value, 0, sizeof(value));
         
-        i = sscanf(buf,"%s%s%s%s", domain, ltype, item, value);
+        i = sscanf(buf,"%s%s%s%1023c", domain, ltype, item, value);
         for(j=0; j < strlen(domain); j++)
             domain[j]=tolower(domain[j]);
         for(j=0; j < strlen(ltype); j++)
@@ -516,6 +535,12 @@
 	if (i != 0)
 	    retval = LIMIT_ERR;
     }
+    if (!retval && caps_set) {
+	retval = cap_set_proc(capabilities) ? LIMIT_ERR : 0;
+	cap_free(capabilities);
+	caps_set = 0;
+	caps_allocated = 0;
+    }
     return retval;
 }
             




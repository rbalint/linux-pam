Better memory handling from upstream CVS
Index: Linux-PAM/modules/pam_env/pam_env.c
===================================================================
RCS file: /afs/sipb/project/debian/cvs/pam/Linux-PAM/modules/pam_env/pam_env.c,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 pam_env.c
--- Linux-PAM/modules/pam_env/pam_env.c	29 Apr 2001 04:17:19 -0000	1.1.1.1
+++ Linux-PAM/modules/pam_env/pam_env.c	19 May 2002 03:12:14 -0000
@@ -536,12 +536,14 @@
 		    * call pam_getenv and _pam_get_item_byname -- sigh
 		    */
 		      
-  char type, tmpval[BUF_SIZE]; /* No unexpanded variable can be bigger than BUF_SIZE */
-  char tmp[MAX_ENV];   /* I know this shouldn't be hard-coded but it's so 
-			* much easier this way */
+  /* No unexpanded variable can be bigger than BUF_SIZE */
+  char type, tmpval[BUF_SIZE];
+
+  /* I know this shouldn't be hard-coded but it's so much easier this way */
+  char tmp[MAX_ENV];
 
   D(("Remember to initialize tmp!"));
-  tmp[0] = '\0';
+  memset(tmp, 0, MAX_ENV);
 
   /* 
    * (possibly non-existent) environment variables can be used as values
@@ -563,15 +565,17 @@
       } else {
 	/* is it really a good idea to try to log this? */
 	D(("Variable buffer overflow: <%s> + <%s>", tmp, tmpptr));
-	_log_err(LOG_ERR, "Variable buffer overflow: <%s> + <%s>", tmp, tmpptr);
+	_log_err(LOG_ERR, "Variable buffer overflow: <%s> + <%s>",
+		 tmp, tmpptr);
       }
       continue;
     } 
     if ('$' == *orig || '@' == *orig) {
       if ('{' != *(orig+1)) {
-	D(("Expandable variables must be wrapped in {} <%s> - ignoring", orig));
-	_log_err(LOG_ERR, "Expandable variables must be wrapped in {} <%s> - ignoring", 
-		 orig);
+	D(("Expandable variables must be wrapped in {}"
+	   " <%s> - ignoring", orig));
+	_log_err(LOG_ERR, "Expandable variables must be wrapped in {}"
+		 " <%s> - ignoring", orig);
 	if ((strlen(tmp) + 1) < MAX_ENV) {
 	  tmp[strlen(tmp)] = *orig++;        /* Note the increment */
 	}
@@ -588,7 +592,8 @@
 	  _log_err(LOG_ERR, "Unterminated expandable variable: <%s>", orig-2);
 	  return PAM_ABORT;
 	}
-	strncpy(tmpval, orig, (size_t) BUF_SIZE);
+	strncpy(tmpval, orig, sizeof(tmpval));
+	tmpval[sizeof(tmpval)-1] = '\0';
 	orig=ptr;
 	/* 
 	 * so, we know we need to expand tmpval, it is either 

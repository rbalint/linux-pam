Patch from Philippe Troin    <phil@fifi.org>
Index: Linux-PAM/modules/pam_unix/pam_unix_passwd.c
===================================================================
RCS file: /afs/sipb/project/debian/cvs/pam/Linux-PAM/modules/pam_unix/pam_unix_passwd.c,v
retrieving revision 1.6
diff -u -r1.6 pam_unix_passwd.c
--- Linux-PAM/modules/pam_unix/pam_unix_passwd.c	15 Sep 2002 20:51:53 -0000	1.6
+++ Linux-PAM/modules/pam_unix/pam_unix_passwd.c	21 Sep 2002 18:26:21 -0000
@@ -503,7 +503,7 @@
 		yppwd.newpw.pw_gecos = pwd->pw_gecos;
 		yppwd.newpw.pw_dir = pwd->pw_dir;
 		yppwd.newpw.pw_shell = pwd->pw_shell;
-		yppwd.oldpass = fromwhat;
+		yppwd.oldpass = fromwhat ? fromwhat : "";
 		yppwd.newpw.pw_passwd = towhat;
 
 		D(("Set password %s for %s", yppwd.newpw.pw_passwd, forwho));
@@ -543,7 +543,7 @@
 #ifdef DEBUG
 		sleep(5);
 #endif
-		_log_err(LOG_NOTICE, "NIS Password for %s was changed on %s", forwho, master);
+		_log_err(LOG_NOTICE, pamh, "NIS Password for %s was changed on %s", forwho, master);
 
 		return retval;
 	}
@@ -560,7 +560,7 @@
 	}
 
 	if (retval == PAM_SUCCESS)
-	    _log_err(LOG_NOTICE, "Password for %s was changed", forwho);
+	    _log_err(LOG_NOTICE, pamh, "Password for %s was changed", forwho);
 
 	return retval;
 }
@@ -694,6 +694,7 @@
 	unsigned int ctrl, lctrl;
 	int retval, i;
 	int remember = -1;
+	int pwlocked = 0;
 
 	/* <DO NOT free() THESE> */
 	const char *user;
@@ -701,6 +702,7 @@
 	/* </DO NOT free() THESE> */
 
 	D(("called."));
+	ctrl = _set_ctrl(pamh, flags, &remember, argc, argv);
 
 #ifdef USE_LCKPWDF
 	/* our current locking system requires that we lock the
@@ -715,15 +717,17 @@
 	   The other possibility is to call lckpwdf() on the first
 	   pam_chauthtok() pass, and hold the lock until released in the
 	   second pass--but is this guaranteed to work? -SRL */
-	i=0;
-	while((retval = lckpwdf()) != 0 && i < 100) {
-		usleep(1000);
-	}
-	if(retval != 0) {
-		return PAM_AUTHTOK_LOCK_BUSY;
-	}
+	if (off(UNIX_NIS, ctrl)) {
+	  i=0;
+	  while((retval = lckpwdf()) != 0 && i < 100) {
+	usleep(1000);
+	  }
+	  if(retval != 0) {
+	    return PAM_AUTHTOK_LOCK_BUSY;
+	  }
+	  pwlocked = 1;
+}
 #endif
-	ctrl = _set_ctrl(pamh, flags, &remember, argc, argv);
 
 	/*
 	 * First get the name of a user
@@ -739,7 +743,7 @@
 		if (user == NULL || !isalnum(*user)) {
 			_log_err(LOG_ERR, pamh, "bad username [%s]", user);
 #ifdef USE_LCKPWDF
-			ulckpwdf();
+			if (pwlocked) ulckpwdf();
 #endif
 			return PAM_USER_UNKNOWN;
 		}
@@ -751,7 +755,7 @@
 			_log_err(LOG_DEBUG, pamh,
 			         "password - could not identify user");
 #ifdef USE_LCKPWDF
-		ulckpwdf();
+		if (pwlocked) ulckpwdf();
 #endif
 		return retval;
 	}
@@ -775,10 +779,10 @@
 
 		if (_unix_blankpasswd(ctrl, user)) {
 #ifdef USE_LCKPWDF
-			ulckpwdf();
+			if (pwlocked) ulckpwdf();
 #endif
 			return PAM_SUCCESS;
-		} else if (off(UNIX__IAMROOT, ctrl)) {
+		} else if (off(UNIX__IAMROOT, ctrl) || on(UNIX_NIS, ctrl)) {
 
 			/* instruct user what is happening */
 #define greeting "Changing password for "
@@ -787,7 +791,7 @@
 				_log_err(LOG_CRIT, pamh,
 				         "password - out of memory");
 #ifdef USE_LCKPWDF
-				ulckpwdf();
+				if (pwlocked) ulckpwdf();
 #endif
 				return PAM_BUF_ERR;
 			}
@@ -799,7 +803,9 @@
 			set(UNIX__OLD_PASSWD, lctrl);
 			retval = _unix_read_password(pamh, lctrl
 						     ,Announce
-					     ,"(current) UNIX password: "
+					     ,(on(UNIX__IAMROOT, ctrl) 
+					       ? "NIS server root password: " 
+					       : "(current) UNIX password: ")
 						     ,NULL
 						     ,_UNIX_OLD_AUTHTOK
 					     ,(const char **) &pass_old);
@@ -809,13 +815,16 @@
 				_log_err(LOG_NOTICE, pamh
 				 ,"password - (old) token not obtained");
 #ifdef USE_LCKPWDF
-				ulckpwdf();
+				if (pwlocked) ulckpwdf();
 #endif
 				return retval;
 			}
-			/* verify that this is the password for this user */
+			/* verify that this is the password for this user
+			 * if we're not using NIS */
 
-			retval = _unix_verify_password(pamh, user, pass_old, ctrl);
+			if (off(UNIX_NIS, ctrl)) {
+				retval = _unix_verify_password(pamh, user, pass_old, ctrl);
+			}
 		} else {
 			D(("process run by root so do nothing this time around"));
 			pass_old = NULL;
@@ -826,7 +835,7 @@
 			D(("Authentication failed"));
 			pass_old = NULL;
 #ifdef USE_LCKPWDF
-			ulckpwdf();
+			if (pwlocked) ulckpwdf();
 #endif
 			return retval;
 		}
@@ -881,7 +890,7 @@
 		if (retval != PAM_SUCCESS) {
 			_log_err(LOG_NOTICE, pamh, "user not authenticated");
 #ifdef USE_LCKPWDF
-			ulckpwdf();
+			if (pwlocked) ulckpwdf();
 #endif
 			return retval;
 		}
@@ -889,7 +898,7 @@
 		if (retval != PAM_SUCCESS) {
 			_log_err(LOG_NOTICE, pamh, "user not authenticated 2");
 #ifdef USE_LCKPWDF
-			ulckpwdf();
+			if (pwlocked) ulckpwdf();
 #endif
 			return retval;
 		}
@@ -922,7 +931,7 @@
 				}
 				pass_old = NULL;	/* tidy up */
 #ifdef USE_LCKPWDF
-				ulckpwdf();
+				if (pwlocked) ulckpwdf();
 #endif
 				return retval;
 			}
@@ -945,7 +954,7 @@
 			         "new password not acceptable");
 			pass_new = pass_old = NULL;	/* tidy up */
 #ifdef USE_LCKPWDF
-			ulckpwdf();
+			if (pwlocked) ulckpwdf();
 #endif
 			return retval;
 		}
@@ -988,7 +997,7 @@
 					         "out of memory for password");
 					pass_new = pass_old = NULL;	/* tidy up */
 #ifdef USE_LCKPWDF
-					ulckpwdf();
+					if (pwlocked) ulckpwdf();
 #endif
 					return PAM_BUF_ERR;
 				}
@@ -1022,7 +1031,7 @@
 	D(("retval was %d", retval));
 
 #ifdef USE_LCKPWDF
-	ulckpwdf();
+	if (pwlocked) ulckpwdf();
 #endif
 	return retval;
 }
